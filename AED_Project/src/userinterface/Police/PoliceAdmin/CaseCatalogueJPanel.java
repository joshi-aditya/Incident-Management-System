/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Police.PoliceAdmin;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CaseWorkRequest;
import Business.WorkQueue.GunViolenceCaseWorkRequest;
import Business.WorkQueue.IncidentWorkRequest;
import Business.WorkQueue.RobberyCaseWorkRequest;
import Business.WorkQueue.SubstanceAbuseCaseWorkRequest;
import Business.WorkQueue.WorkRequest;
import com.google.code.geocoder.Geocoder;
import com.google.code.geocoder.GeocoderRequestBuilder;
import com.google.code.geocoder.model.GeocodeResponse;
import com.google.code.geocoder.model.GeocoderRequest;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import userinterface.Analysis.AnalysisByArea;
import userinterface.Analysis.AnalysisByIncidentType;
import userinterface.Analysis.AnalysisBySubstanceType;

/**
 *
 * @author joshiaditya
 */
public class CaseCatalogueJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CaseCatalogue
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Network network;
    Map<String, ArrayList<String>> coordmap = new HashMap<String, ArrayList<String>>();
    ArrayList<String> latlng = new ArrayList<>();
    String referenceString;

    public CaseCatalogueJPanel(JPanel userProcessContainer, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.network = network;
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblCases.getModel();
        model.setRowCount(0);

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                for (WorkRequest req : ua.getWorkQueue().getWorkRequestList()) {
                    if ((req instanceof GunViolenceCaseWorkRequest)
                            || (req instanceof SubstanceAbuseCaseWorkRequest)
                            || (req instanceof RobberyCaseWorkRequest)) {

                        Object[] row = new Object[6];
                        row[0] = req;
                        row[1] = ((CaseWorkRequest) req).getIncidentType();
                        row[2] = ((CaseWorkRequest) req).getZipCode();
                        row[3] = org.getName();
                        row[4] = ua.getEmployee().getName();
                        row[5] = req.getStatus();
                        model.addRow(row);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCases = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnReopenCase = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Master Case Catalogue");

        tblCases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Case ID", "Incident Type", "Address", "Police Station", "Police Officer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCases);
        if (tblCases.getColumnModel().getColumnCount() > 0) {
            tblCases.getColumnModel().getColumn(0).setResizable(false);
            tblCases.getColumnModel().getColumn(1).setResizable(false);
            tblCases.getColumnModel().getColumn(2).setResizable(false);
            tblCases.getColumnModel().getColumn(3).setResizable(false);
            tblCases.getColumnModel().getColumn(4).setResizable(false);
            tblCases.getColumnModel().getColumn(5).setResizable(false);
        }

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jButton1.setText("View analysis by Incident Type");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View analysis by Substance Type");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnReopenCase.setText("Reopen Case");
        btnReopenCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReopenCaseActionPerformed(evt);
            }
        });

        jButton3.setText("View analysis on map");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("View analysis by area");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReopenCase, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(258, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(52, 52, 52)
                        .addComponent(jButton2)
                        .addGap(66, 66, 66)
                        .addComponent(jButton4)
                        .addGap(61, 61, 61)
                        .addComponent(jButton3)))
                .addGap(42, 42, 42)
                .addComponent(btnReopenCase)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(183, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AnalysisByIncidentType analysisByIncidentType = new AnalysisByIncidentType(userProcessContainer, network);
        userProcessContainer.add("AnalysisByIncidentType", analysisByIncidentType);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        AnalysisBySubstanceType analysisBySubstanceType = new AnalysisBySubstanceType(userProcessContainer, network);
        userProcessContainer.add("AnalysisBySubstanceType", analysisBySubstanceType);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnReopenCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReopenCaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCases.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblCases.getValueAt(selectedRow, 0);

            if (request.getStatus().equals("Assigned")) {
                JOptionPane.showMessageDialog(this, "Case already open!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                request.setStatus("Assigned");
            }
            populateTable();

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row from the table first!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnReopenCaseActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        WorkRequest tempRequest;

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                for (WorkRequest req : ua.getWorkQueue().getWorkRequestList()) {
                    if ((req instanceof GunViolenceCaseWorkRequest)
                            || (req instanceof SubstanceAbuseCaseWorkRequest)
                            || (req instanceof RobberyCaseWorkRequest)) {
                        referenceString = "";
                        tempRequest = req;

                        addtoArrayList(tempRequest);
                    }
                }
            }
        }

        String coordinates = "";

       // JOptionPane.showMessageDialog(this, coordmap.size());

        Map.Entry<String, ArrayList<String>> entry = coordmap.entrySet().iterator().next();
        String key = entry.getKey();
        List<String> split = Arrays.asList(key.split(","));
        ArrayList<String> value = entry.getValue();
        coordinates = coordinates + "{lat: " + split.get(0) + ", lng: " + split.get(1) + "},";
        coordinates = coordinates + "\n";
        for (String s : value) {
            split = Arrays.asList(s.split(","));
            coordinates = coordinates + "{lat: " + split.get(0) + ", lng: " + split.get(1) + "},";
            coordinates = coordinates + "\n";
        }
        coordinates = coordinates.trim();
        coordinates = coordinates.substring(0, coordinates.length() - 1);
       // JOptionPane.showMessageDialog(this, coordinates);
        /* coordinates =   {lat: 25.774, lng: -80.190},
        {lat: 18.466, lng: -66.118},
        {lat: 32.321, lng: -64.757},
        {lat: 25.774, lng: -80.190}; 
         */
        Browser browser = new Browser();
        BrowserView view = new BrowserView(browser);
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.add(view, BorderLayout.CENTER);
        frame.setSize(700, 500);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        browser.loadHTML("<!DOCTYPE html>\n"
                + "<html>\n"
                + "  <head>\n"
                + "    <title>User-editable Shapes</title>\n"
                + "    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n"
                + "    <meta charset=\"utf-8\">\n"
                + "    <style>\n"
                + "      /* Always set the map height explicitly to define the size of the div\n"
                + "       * element that contains the map. */\n"
                + "      #map {\n"
                + "        height: 100%;\n"
                + "      }\n"
                + "      /* Optional: Makes the sample page fill the window. */\n"
                + "      html, body {\n"
                + "        height: 100%;\n"
                + "        margin: 0;\n"
                + "        padding: 0;\n"
                + "      }\n"
                + "    </style>\n"
                + "  </head>\n"
                + "  <body>\n"
                + "    <div id=\"map\"></div>\n"
                + "    <script>\n"
                + "      // This example adds a user-editable polygon to the map.\n"
                + "      function initMap() {\n"
                + "        var map = new google.maps.Map(document.getElementById('map'), {\n"
                + "          center: {lat: 42.3611, lng: -71.0570},\n"
                + "          zoom: 10\n"
                + "        });\n"
                + "\n"
                + "           var triangleCoords = [\n"
                + coordinates + "\n"
                + "        ];\n"
                + "\n"
                + "        // Define a polygon and set its editable property to true.\n"
                + "        var polygon = new google.maps.Polygon({\n"
                + "          paths: triangleCoords,\n"
                + "          editable: false\n"
                + "        });\n"
                + "        polygon.setMap(map);\n"
                + "      }\n"
                + "    </script>\n"
                + "    <script async defer\n"
                + "    src=\"https://maps.google.com/maps/api/js?key=AIzaSyBCBSU4984aYzMDuyD8imEBqXnxrQKTOQw&callback=initMap\">\n"
                + "    </script>\n"
                + "  </body>\n"
                + "</html>");

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        AnalysisByArea panel = new AnalysisByArea(userProcessContainer, enterprise, network);
        userProcessContainer.add("AnalysisByArea", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_jButton4ActionPerformed
    public void addtoArrayList(WorkRequest tempRequest) {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                for (WorkRequest req : ua.getWorkQueue().getWorkRequestList()) {
                    if ((req instanceof GunViolenceCaseWorkRequest)
                            || (req instanceof SubstanceAbuseCaseWorkRequest)
                            || (req instanceof RobberyCaseWorkRequest)) {
                        if (req != tempRequest) {
                            double lat1, lat2, lng1, lng2;
                            lat1 = ((CaseWorkRequest) tempRequest).getLatitute();
                            lng1 = ((CaseWorkRequest) tempRequest).getLongitude();
                            lat2 = ((CaseWorkRequest) req).getLatitute();
                            lng2 = ((CaseWorkRequest) req).getLongitude();
                            distFrom(lat1, lng1, lat2, lng2);
                        }
                    }
                }
            }
        }
        //coordmap.put(referenceString, latlng);
    //coordmap.put(referenceString, latlng);
    }

public void distFrom(double lat1, double lng1, double lat2, double lng2) {

         double earthRadius = 6371000; //meters
        //double earthRadius = 3959; //miles
        referenceString = String.valueOf(lat1) + "," + String.valueOf(lng1);
        double dLat = Math.toRadians(lat2 - lat1);
        double dLng = Math.toRadians(lng2 - lng1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(dLng / 2) * Math.sin(dLng / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double dist = (double) (earthRadius * c);
        dist = dist / 1000;
        if (dist <= 3.0) {
            try {
                try {
                    if (!coordmap.containsKey(referenceString)) {
                        coordmap.put(referenceString, new ArrayList<>());
                        latlng = coordmap.get(referenceString);
                        latlng.add(String.valueOf(lat2) + "," + String.valueOf(lng2));
                        coordmap.put(referenceString, latlng);
                    } else {
                        latlng = coordmap.get(referenceString);
                        latlng.add(String.valueOf(lat2) + "," + String.valueOf(lng2));
                        coordmap.put(referenceString, latlng);
                    }
                } catch (Exception e) {
//                    coordmap.put(referenceString, new ArrayList<>());
//                    latlng = coordmap.get(referenceString);
//                    latlng.add(String.valueOf(lat2) + "," + String.valueOf(lng2));
//                    coordmap.put(referenceString, latlng);
                }
            } catch (Exception ex) {
                System.out.println("" + ex.getMessage());
            }
        }
        //return dist;
    }

    /*
    public void getlatlong(String s1, String s2) {
        try {
            Geocoder geocoder = new Geocoder();
            GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setAddress(s1).setLanguage("en").getGeocoderRequest();
            GeocodeResponse geocoderResponse = geocoder.geocode(geocoderRequest);
            JSONObject json = new JSONObject(geocoderResponse);
            JSONArray result = json.getJSONArray("results");
            JSONObject result1 = result.getJSONObject(0);
            JSONObject geometry = result1.getJSONObject("geometry");
            JSONObject locat = geometry.getJSONObject("location");
            double lat1 = locat.getDouble("lat");
            double lng1 = locat.getDouble("lng");
            //coordmap.put(String.valueOf(lat1) + "," + String.valueOf(lng1), new ArrayList<String>());
            referenceString = String.valueOf(lat1) + "," + String.valueOf(lng1);
            Geocoder geocoder1 = new Geocoder();
            GeocoderRequest geocoderRequest1 = new GeocoderRequestBuilder().setAddress(s2).setLanguage("en").getGeocoderRequest();
            GeocodeResponse geocoderResponse1 = geocoder1.geocode(geocoderRequest1);
            JSONObject json1 = new JSONObject(geocoderResponse1);
            JSONArray result2 = json1.getJSONArray("results");
            JSONObject result3 = result2.getJSONObject(0);
            JSONObject geometry1 = result3.getJSONObject("geometry");
            JSONObject locat1 = geometry1.getJSONObject("location");
            double lat2 = locat1.getDouble("lat");
            double lng2 = locat1.getDouble("lng");

            URL u;
            InputStream is = null;
            DataInputStream dis;
            String s;
            String s3 = "";

            String ns;
            ns = "http://maps.googleapis.com/maps/api/distancematrix/json?origins=" + lat2 + "," + lng2 + "&destinations=" + lat1 + "," + lng1 + "&mode=driving&language=en-EN&sensor=false";
            u = new URL(ns);
            is = u.openStream();
            dis = new DataInputStream(new BufferedInputStream(is));

            while ((s = dis.readLine()) != null) {
                //System.out.println(s);  //----------prints out entire JSON
                s3 = s3 + s;
            }

            JSONObject json3 = new JSONObject(s3);
            JSONArray result5 = json3.getJSONArray("rows");
            JSONObject result6 = result5.getJSONObject(0);
            JSONArray geometry5 = result6.getJSONArray("elements");
            JSONObject geometry6 = geometry5.getJSONObject(0);
            JSONObject locat6 = geometry6.getJSONObject("distance");
            String distance = locat6.getString("text");
            String[] sr = distance.split(" ");
            double distance1 = Double.parseDouble(sr[0]);
            if (distance1 <= 4.0) {
                latlng = coordmap.get(referenceString);
                latlng.add(String.valueOf(lat2) + "," + String.valueOf(lng2));
                coordmap.put(referenceString, latlng);
            }

        } catch (Exception ex) {
            System.out.println("" + ex.getMessage());
        }
    }
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReopenCase;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCases;
    // End of variables declaration//GEN-END:variables
}
