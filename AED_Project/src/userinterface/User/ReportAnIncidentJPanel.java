/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.User;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.GovernmentEnterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.PoliceEnterprise;
import Business.Network.Network;
import Business.Organization.AmbulanceOrganization;
import Business.Organization.Organization;
import Business.Organization.PoliceOrganization;
import Business.Organization.UserOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmbulanceWorkRequest;
import Business.WorkQueue.IncidentWorkRequest;
import Business.WorkQueue.IncidentWorkRequest.IncidentType;
import java.io.File;
import javax.swing.JPanel;
import com.maxmind.geoip.Location;
import com.maxmind.geoip.LookupService;
import javax.swing.JOptionPane;
import com.google.code.geocoder.Geocoder;
import com.google.code.geocoder.GeocoderRequestBuilder;
import com.google.code.geocoder.model.GeocodeResponse;
import com.google.code.geocoder.model.GeocoderRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Sneha
 */
public class ReportAnIncidentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReportAnIncidentJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    Enterprise enterprise;
    EcoSystem ecoSystem;
    Network network;

    ReportAnIncidentJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, Network network, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        this.network = network;
        populateIncidentType();
    }

    public void populateIncidentType() {
        IncidentreportComboBox.removeAllItems();
        for (IncidentType type : IncidentWorkRequest.IncidentType.values()) {
            IncidentreportComboBox.addItem(type.getValue());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IncidentreportComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addressjTextField = new javax.swing.JTextField();
        zipCodejTextField = new javax.swing.JTextField();
        btnReportIncident = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        requestAmbulancejButton = new javax.swing.JButton();

        jLabel1.setText("What kind of incident you want to report ?");

        IncidentreportComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncidentreportComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Address:");

        jLabel3.setText("Message:");

        btnReportIncident.setText("Report Incident");
        btnReportIncident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportIncidentActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel4.setText("Zip Code:");

        msgTextArea.setColumns(20);
        msgTextArea.setRows(5);
        jScrollPane1.setViewportView(msgTextArea);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Report an incident");

        requestAmbulancejButton.setText("Request Ambulance");
        requestAmbulancejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestAmbulancejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IncidentreportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addressjTextField)
                                        .addGap(91, 91, 91))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(zipCodejTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnReportIncident)
                                                .addGap(18, 18, 18)
                                                .addComponent(requestAmbulancejButton)))
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addContainerGap(395, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IncidentreportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addressjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(zipCodejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReportIncident)
                    .addComponent(requestAmbulancejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void IncidentreportComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncidentreportComboBoxActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_IncidentreportComboBoxActionPerformed

    private void btnReportIncidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportIncidentActionPerformed
        // TODO add your handling code here:
        try {
            if (!addressjTextField.getText().trim().isEmpty() && !zipCodejTextField.getText().trim().isEmpty()) {
                String address = addressjTextField.getText();
                String zipCode = zipCodejTextField.getText();
                String message = msgTextArea.getText();

                IncidentWorkRequest incidentWorkRequest = new IncidentWorkRequest();

                for (IncidentType type : IncidentWorkRequest.IncidentType.values()) {
                    if (IncidentreportComboBox.getSelectedItem().toString().equals(type.getValue())) {
                        incidentWorkRequest.setIncidentType(type);
                    }
                }

                incidentWorkRequest.setAddress(address);
                incidentWorkRequest.setZipCode(zipCode);
                incidentWorkRequest.setMessage(message);
                incidentWorkRequest.setSender(userAccount);
                incidentWorkRequest.setStatus("Authentication Required");

                String addressString = (address + ", " + zipCode);

                Geocoder geocoder = new Geocoder();
                GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setAddress(addressString).setLanguage("en").getGeocoderRequest();
                GeocodeResponse geocoderResponse = geocoder.geocode(geocoderRequest);

                JSONObject json = new JSONObject(geocoderResponse);
                JSONArray result = json.getJSONArray("results");
                JSONObject result1 = result.getJSONObject(0);
                JSONObject geometry = result1.getJSONObject("geometry");
                JSONObject locat = geometry.getJSONObject("location");
                double lat = locat.getDouble("lat");
                double lng = locat.getDouble("lng");

                incidentWorkRequest.setLatitude(lat);
                incidentWorkRequest.setLongitude(lng);

                for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if ((ent instanceof PoliceEnterprise)) {
                        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
                            if ((organization instanceof PoliceOrganization)) {

                                organization.getWorkQueue().getWorkRequestList().add(incidentWorkRequest);
                                break;
                            }
                        }
                    }
                }

                for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (ent instanceof GovernmentEnterprise) {
                        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof UserOrganization) {

                                organization.getWorkQueue().getWorkRequestList().add(incidentWorkRequest);
                                break;
                            }
                        }
                    }
                }

                JOptionPane.showMessageDialog(null, "Incident Reported");
                ArrayList<Integer> tempList = userAccount.getIncidentList();
                tempList.add(incidentWorkRequest.getIncidentId());
                userAccount.setIncidentList(tempList);
                addressjTextField.setText("");
                zipCodejTextField.setText("");
                msgTextArea.setText("");

            } else {
                JOptionPane.showMessageDialog(null, "Please enter all the details");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter the correct details");
        }
    }//GEN-LAST:event_btnReportIncidentActionPerformed

    public String getLocation(String ipAddress) {

        File file = new File("GeoLiteCity.dat");
        return getLocation(ipAddress, file);

    }

    public String getLocation(String ipAddress, File file) {

        //ServerLocation serverLocation = null;
        String s = "";
        try {

            //serverLocation = new ServerLocation();
            LookupService lookup = new LookupService(file, LookupService.GEOIP_MEMORY_CACHE);
            Location locationServices = lookup.getLocation(ipAddress);

            s = s + locationServices.region + String.valueOf(locationServices.latitude)
                    + String.valueOf(locationServices.longitude) + locationServices.postalCode;

        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        return s;

    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void requestAmbulancejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestAmbulancejButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (!addressjTextField.getText().trim().isEmpty() && !zipCodejTextField.getText().trim().isEmpty()) {
                String address = addressjTextField.getText();
                String zipCode = zipCodejTextField.getText();
                String message = msgTextArea.getText();
                String type = IncidentreportComboBox.getSelectedItem().toString();

                AmbulanceWorkRequest ambulance = new AmbulanceWorkRequest();

                ambulance.setAddress(address);
                ambulance.setZipCode(zipCode);
                ambulance.setMessage(message);
                ambulance.setSender(userAccount);
                ambulance.setStatus("Ambulance Requested");
                ambulance.setIncidentType(type);

                String addressString = (address + ", " + zipCode);

                Geocoder geocoder = new Geocoder();
                GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setAddress(addressString).setLanguage("en").getGeocoderRequest();
                GeocodeResponse geocoderResponse = geocoder.geocode(geocoderRequest);

                JSONObject json = new JSONObject(geocoderResponse);
                JSONArray result = json.getJSONArray("results");
                JSONObject result1 = result.getJSONObject(0);
                JSONObject geometry = result1.getJSONObject("geometry");
                JSONObject locat = geometry.getJSONObject("location");
                double lat = locat.getDouble("lat");
                double lng = locat.getDouble("lng");

                ambulance.setLatitude(lat);
                ambulance.setLongitude(lng);

                for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (ent instanceof HospitalEnterprise) {
                        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof AmbulanceOrganization) {

                                organization.getWorkQueue().getWorkRequestList().add(ambulance);
                                break;
                            }
                        }
                    }
                }

                JOptionPane.showMessageDialog(null, "Request for ambulance has been raised");

            } else {
                JOptionPane.showMessageDialog(null, "Please enter all the details");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter the correct details");
        }

    }//GEN-LAST:event_requestAmbulancejButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> IncidentreportComboBox;
    private javax.swing.JTextField addressjTextField;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReportIncident;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JButton requestAmbulancejButton;
    private javax.swing.JTextField zipCodejTextField;
    // End of variables declaration//GEN-END:variables
}
